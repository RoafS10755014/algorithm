
def Insertion_Sort(datas):                 #假設陣列的長度為n
    for i in range(1, len(datas)):          # n
        for j in range(i):            # n(n-1)
            current = datas[i]        # (n-1)^2
            if current < datas[j]:     #
                for k in range(i,j):  # (n-1)^2
                  print(datas)     # 
    return datas                   #1
                            # total = n+n^2-n+2(n^2-2n+1)+1 = 3n^2 - 4n + 3  ==> O(n^2)


def insertionSort(arr):
    for i in range(len(arr)):                     # n+1
        preIndex = i-1                       # n
        current = arr[i]                      # n
        while preIndex >= 0 and arr[preIndex] > current:   # n(n-1)
            arr[preIndex+1] = arr[preIndex]          # n(n-1)
            preIndex-=1                     # n(n-1)
        arr[preIndex+1] = current                 # n
        print(arr)
    return arr                             # 1         total = 4n + 1 + 3n^2 -3n = 3n^2 + n + 1 ==> O(n^2)

if __name__ == '__main__':
    import random
    a = list(range(10))
    random.shuffle(a)
    b = a.copy()

    arr = insertionSort(a)
    print('---'*10)
    Insertion_Sort(b)
